//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HttpClient.WcfSiplexService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfSiplexService.IWcfSiplex")]
    public interface IWcfSiplex {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfSiplex/Add", ReplyAction="http://tempuri.org/IWcfSiplex/AddResponse")]
        int Add(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfSiplex/Add", ReplyAction="http://tempuri.org/IWcfSiplex/AddResponse")]
        System.Threading.Tasks.Task<int> AddAsync(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfSiplex/Concat", ReplyAction="http://tempuri.org/IWcfSiplex/ConcatResponse")]
        string Concat(string s, double d);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfSiplex/Concat", ReplyAction="http://tempuri.org/IWcfSiplex/ConcatResponse")]
        System.Threading.Tasks.Task<string> ConcatAsync(string s, double d);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfSiplex/Sum", ReplyAction="http://tempuri.org/IWcfSiplex/SumResponse")]
        WcfSiplex.A Sum(WcfSiplex.A a1, WcfSiplex.A a2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfSiplex/Sum", ReplyAction="http://tempuri.org/IWcfSiplex/SumResponse")]
        System.Threading.Tasks.Task<WcfSiplex.A> SumAsync(WcfSiplex.A a1, WcfSiplex.A a2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWcfSiplexChannel : HttpClient.WcfSiplexService.IWcfSiplex, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WcfSiplexClient : System.ServiceModel.ClientBase<HttpClient.WcfSiplexService.IWcfSiplex>, HttpClient.WcfSiplexService.IWcfSiplex {
        
        public WcfSiplexClient() {
        }
        
        public WcfSiplexClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WcfSiplexClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WcfSiplexClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WcfSiplexClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Add(int x, int y) {
            return base.Channel.Add(x, y);
        }
        
        public System.Threading.Tasks.Task<int> AddAsync(int x, int y) {
            return base.Channel.AddAsync(x, y);
        }
        
        public string Concat(string s, double d) {
            return base.Channel.Concat(s, d);
        }
        
        public System.Threading.Tasks.Task<string> ConcatAsync(string s, double d) {
            return base.Channel.ConcatAsync(s, d);
        }
        
        public WcfSiplex.A Sum(WcfSiplex.A a1, WcfSiplex.A a2) {
            return base.Channel.Sum(a1, a2);
        }
        
        public System.Threading.Tasks.Task<WcfSiplex.A> SumAsync(WcfSiplex.A a1, WcfSiplex.A a2) {
            return base.Channel.SumAsync(a1, a2);
        }
    }
}
